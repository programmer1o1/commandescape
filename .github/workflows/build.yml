name: Build and Auto-Release

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better release notes

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build all versions at once
        run: |
          echo "========================================="
          echo "Building all CommandEscape versions"
          echo "========================================="
          
          # Stonecutter builds all versions at once
          ./gradlew build --no-daemon --no-configuration-cache
          
          echo "Build completed!"

      - name: Collect built JARs and generate version info
        run: |
          mkdir -p all-builds
          
          # Create version list file
          echo "# Supported Versions" > version-info.txt
          echo "" >> version-info.txt
          
          # Find all built JAR files
          for dir in versions/*/; do
            if [ -d "$dir/build/libs" ]; then
              VERSION=$(basename "$dir")
          
              # Copy JAR files (excluding sources and dev)
              for jar in "$dir/build/libs"/*[!-sources][!-dev].jar; do
                if [ -f "$jar" ]; then
                  cp "$jar" "all-builds/"
                  echo "Copied: $(basename "$jar")"
          
                  # Add to version list
                  echo "- Minecraft $VERSION: \`$(basename "$jar")\`" >> version-info.txt
                fi
              done
            fi
          done
          
          echo "" >> version-info.txt
          echo "Total JARs built: $(ls -1 all-builds/*.jar 2>/dev/null | wc -l)"
          
          # Save version info for release notes
          echo "VERSION_LIST<<EOF" >> $GITHUB_ENV
          cat version-info.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Get commit messages
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          # Get recent commit messages (last 10 or since last tag)
          echo "RECENT_COMMITS<<EOF" >> $GITHUB_ENV
          echo "## Recent Changes" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          git log --pretty=format:"- %s (%h)" -n 10 >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Generate build info
        run: |
          echo "BUILD_DATE=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: CommandEscape-all-versions-${{ env.SHORT_SHA }}
          path: all-builds/*.jar
          if-no-files-found: warn
          retention-days: 30

      # Auto-release on main branch only
      - name: Create or Update Latest Release
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: ncipollo/release-action@v1
        with:
          tag: latest
          name: "Latest Build - ${{ env.BUILD_DATE }}"
          body: |
            # CommandEscape Mod - Latest Build
            
            > **Build Information**
            > - **Date:** ${{ env.BUILD_DATE }}
            > - **Commit:** [`${{ env.SHORT_SHA }}`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
            > - **Branch:** `${{ env.BRANCH_NAME }}`
            > - **Author:** ${{ github.actor }}
            
            ---
            
            ## Available Versions
            
            ${{ env.VERSION_LIST }}
            
            ---
            
            ## Features
            
            CommandEscape allows you to send messages that start with `/` without executing them as commands.
            
            - **Simple Usage:** Type `\` before any message to escape it
            ---
            
            ${{ env.RECENT_COMMITS }}
            
            ---
            
            ## Installation
            
            1. **Download** the JAR file matching your Minecraft version
            2. **Install** [Fabric Loader](https://fabricmc.net/use/) if you haven't already
            3. **Place** the JAR file in your `.minecraft/mods` folder
            4. **Launch** Minecraft with the Fabric profile
            
            ## Requirements
            
            - Fabric Loader
            - Minecraft 1.19.1 - 1.21.8
            
            ---
            
            <details>
            <summary>Build Statistics</summary>
            
            - **Workflow:** `${{ github.workflow }}`
            - **Run ID:** `${{ github.run_id }}`
            - **Run Number:** `#${{ github.run_number }}`
            - **Event:** `${{ github.event_name }}`
            
            </details>
            
            ---
            
            *âš¡ This is an automated build from the latest commit on the `${{ env.BRANCH_NAME }}` branch*
          artifacts: "all-builds/*.jar"
          allowUpdates: true
          removeArtifacts: true
          makeLatest: true
          prerelease: false
          artifactErrorsFailBuild: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Summary
        if: always()
        run: |
          echo "# Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Date:** ${{ env.BUILD_DATE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ env.SHORT_SHA }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ env.BRANCH_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -d "all-builds" ]; then
            echo "### Built JARs:" >> $GITHUB_STEP_SUMMARY
            for jar in all-builds/*.jar; do
              if [ -f "$jar" ]; then
                echo "- \`$(basename "$jar")\` ($(du -h "$jar" | cut -f1))" >> $GITHUB_STEP_SUMMARY
              fi
            done
          else
            echo "No artifacts were built." >> $GITHUB_STEP_SUMMARY
          fi